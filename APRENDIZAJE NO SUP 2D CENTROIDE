from sklearn.datasets import load_iris
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np

# Cargar el dataset Iris
X_iris = load_iris()
X = X_iris.data  # Datos originales

# Paso 1: Reducción de dimensionalidad a 2 dimensiones usando PCA
pca = PCA(n_components=2)  # Reducimos a 2 dimensiones
X_reduced = pca.fit_transform(X)

# Paso 2: Aplicación de K-means en los datos reducidos
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X_reduced)
labels = kmeans.labels_  # Etiquetas de cluster asignadas a cada punto
centroids = kmeans.cluster_centers_  # Coordenadas de los centroides

# Paso 3: Visualización de los clusters con colores personalizados y centroides
plt.figure(figsize=(8, 6))

# Colores personalizados para los clusters
color_codes = ['C1', 'C2', 'C3']  # Usamos 3 colores para los clusters

# Agrupamos los datos según los clusters y los graficamos
clusters = []
for i in range(3):  # Asumiendo que tenemos 3 clusters
    clusters.append(X_reduced[labels == i])
    plt.scatter(clusters[i][:, 0], clusters[i][:, 1], marker='o', s=50, linewidths=2, color=color_codes[i], label=f'Cluster {i+1}')

# Graficamos los centroides con una "X" en color negro
plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=169, linewidths=5, color='k', zorder=10, label='Centroides')

plt.xlabel("Componente Principal 1")
plt.ylabel("Componente Principal 2")
plt.title("Clusters en 2D con Centroides (K-means)")
plt.legend()
plt.show()
